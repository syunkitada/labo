# vxlan2.1 に加え、br-exごしにvxlanする構成です
# 参考: https://docs.openvswitch.org/en/latest/howto/userspace-tunneling/
#
# # trace vmあて通信のtrace
# $ sudo docker exec ovs-vxlan2-n1 ovs-appctl ofproto/trace tenant1 in_port=n1_0_t1vm1,icmp,nw_dst=10.100.0.3
# Flow: icmp,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,nw_src=0.0.0.0,nw_dst=10.100.0.3,nw_tos=0,nw_ecn=0,nw_ttl=0,nw_frag=no,icmp_type=0,icmp_code=0
#
# bridge("tenant1")
# -----------------
#  0. in_port=1, priority 32768
#     load:0xa0a0202->NXM_NX_TUN_IPV4_DST[]
#     output:2
#      -> output to kernel tunnel
#
# Final flow: icmp,tun_src=0.0.0.0,tun_dst=10.10.2.2,tun_ipv6_src=::,tun_ipv6_dst=::,tun_gbp_id=0,tun_gbp_flags=0,tun_tos=0,tun_ttl=0,tun_erspan_ver=0,gtpu_flags=0,gtpu_msgtype=0,tun_flags=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,nw_src=0.0.0.0,nw_dst=10.100.0.3,nw_tos=0,nw_ecn=0,nw_ttl=0,nw_frag=no,icmp_type=0,icmp_code=0
# Megaflow: recirc_id=0,eth,ip,in_port=1,nw_ecn=0,nw_frag=no
# Datapath actions: set(tunnel(tun_id=0x1388,dst=10.10.2.2,ttl=64,tp_dst=4789,flags(df|key))),5
#
# # ルーティングテーブル
# $ sudo docker exec ovs-vxlan2-n1 ovs-appctl ovs/route/show
# Route Table:
# Cached: 10.10.1.2/32 dev br-ex SRC 10.10.1.2 local
# Cached: 127.0.0.1/32 dev lo SRC 127.0.0.1 local
# Cached: 127.0.0.0/8 dev lo SRC 127.0.0.1 local
# Cached: 10.10.1.0/24 dev br-ex SRC 10.10.1.2
# Cached: 0.0.0.0/0 dev br-ex GW 10.10.1.1 SRC 10.10.1.2
common:
  host: VM1.ubuntu22.example.com

ipam:
  network1:
    subnet: 10.10.1.0/24
    kind: l2
  network2:
    subnet: 10.10.2.0/24
    kind: l2
  t1vm_network1:
    subnet: 10.100.0.0/24
    kind: l2
  t2vm_network1:
    subnet: 10.100.0.0/24
    kind: l2

template_map:
  node:
    kind: container
    image: docker-registry.example.com:5000/labo/rocky8-nwnode:latest
    mtu: 1500
  vm:
    mtu: 1500
    routes:
      - dst: default
        via: <%=gateway_ip(_links.0.peer_ips.0.network)%>

nodes:
  - name: r1
    templates:
      - node
    links:
      - peer: n1
        ips:
          - inet: <%=gateway_inet4(network1)%>
        peer_ips:
          - inet: <%=assign_inet4(network1)%>
      - peer: n2
        ips:
          - inet: <%=gateway_inet4(network2)%>
        peer_ips:
          - inet: <%=assign_inet4(network2)%>
  - name: n1
    templates:
      - node
    routes:
      - dst: default
        via: <%=_links.0.ips.0.ip%>
    child_links:
      - peer: t1vm1
        peer_ips:
          - inet: <%=assign_inet4(t1vm_network1)%>
      - peer: t2vm1
        peer_ips:
          - inet: <%=assign_inet4(t2vm_network1)%>
    childs:
      - name: t1vm1
        templates:
          - node
          - vm
        tests:
          - kind: ping
            targets:
              - name: t1vm2
                dst: <%=_node_map.t1vm2._links.0.peer_ips.0.ip%>
      - name: t2vm1
        templates:
          - node
          - vm
        tests:
          - kind: ping
            targets:
              - name: t2vm2
                dst: <%=_node_map.t2vm2._links.0.peer_ips.0.ip%>
    cmds:
      - systemctl start openvswitch
      # start n1_0_r1のipをbr-exに設定しなおす
      - ip addr del 10.10.1.2/24 dev n1_0_r1 || echo "already deleted"
      - ovs-vsctl --may-exist add-br br-ex
      - ip link set br-ex up
      - ip addr add 10.10.1.2/24 dev br-ex || echo "already added"
      - ovs-vsctl --may-exist add-port br-ex n1_0_r1
      - ip route add default via 10.10.1.1 || echo "already added"
      # end
      - ovs-vsctl --may-exist add-br tenant1
      - ovs-vsctl --may-exist add-br tenant2
      - ip link set tenant1 up
      - ip link set tenant2 up
      - ovs-vsctl --may-exist add-port tenant1 n1_0_t1vm1
      - ovs-vsctl --may-exist add-port tenant2 n1_1_t2vm1
      - ovs-vsctl --may-exist add-port tenant1 vxlan1 -- set interface vxlan1 type=vxlan options:remote_ip=flow options:key=5000
      - ovs-vsctl --may-exist add-port tenant2 vxlan2 -- set interface vxlan2 type=vxlan options:remote_ip=flow options:key=6000
      - ovs-ofctl add-flow tenant1 "in_port=n1_0_t1vm1 actions=set_field:<%=_node_map.n2._links.0.peer_ips.0.ip%>->tun_dst,vxlan1"
      - ovs-ofctl add-flow tenant1 "in_port=vxlan1 actions=n1_0_t1vm1"
      - ovs-ofctl add-flow tenant2 "in_port=n1_1_t2vm1 actions=set_field:<%=_node_map.n2._links.0.peer_ips.0.ip%>->tun_dst,vxlan2"
      - ovs-ofctl add-flow tenant2 "in_port=vxlan2 actions=n1_1_t2vm1"
      # 以下はなくてもよいし、あってもよい
      # - ovs-ofctl add-flow br-ex "in_port=n1_0_r1 actions=output:local"
      # - ovs-ofctl add-flow br-ex "in_port=local actions=output:n1_0_r1"
  - name: n2
    templates:
      - node
    routes:
      - dst: default
        via: <%=_links.0.ips.0.ip%>
    child_links:
      - peer: t1vm2
        peer_ips:
          - inet: <%=assign_inet4(t1vm_network1)%>
      - peer: t2vm2
        peer_ips:
          - inet: <%=assign_inet4(t2vm_network1)%>
    childs:
      - name: t1vm2
        templates:
          - node
          - vm
      - name: t2vm2
        templates:
          - node
          - vm
    cmds:
      - systemctl start openvswitch
      - ovs-vsctl --may-exist add-br tenant1
      - ovs-vsctl --may-exist add-br tenant2
      - ip link set tenant1 up
      - ip link set tenant2 up
      - ovs-vsctl --may-exist add-port tenant1 n2_0_t1vm2
      - ovs-vsctl --may-exist add-port tenant2 n2_1_t2vm2
      - ovs-vsctl --may-exist add-port tenant1 vxlan1 -- set interface vxlan1 type=vxlan options:remote_ip=flow options:key=5000
      - ovs-vsctl --may-exist add-port tenant2 vxlan2 -- set interface vxlan2 type=vxlan options:remote_ip=flow options:key=6000
      - ovs-ofctl add-flow tenant1 "in_port=n2_0_t1vm2 actions=set_field:<%=_node_map.n1._links.0.peer_ips.0.ip%>->tun_dst,vxlan1"
      - ovs-ofctl add-flow tenant1 "in_port=vxlan1 actions=n2_0_t1vm2"
      - ovs-ofctl add-flow tenant2 "in_port=n2_1_t2vm2 actions=set_field:<%=_node_map.n1._links.0.peer_ips.0.ip%>->tun_dst,vxlan2"
      - ovs-ofctl add-flow tenant2 "in_port=vxlan2 actions=n2_1_t2vm2"
